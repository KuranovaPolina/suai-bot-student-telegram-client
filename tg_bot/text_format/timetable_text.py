from official_data.official_timetable_data import get_official_teacher_info_data

days_name = {
    0: "–í–Ω–µ —Å–µ—Ç–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
    1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    2: "–í—Ç–æ—Ä–Ω–∏–∫",
    3: "–°—Ä–µ–¥–∞",
    4: "–ß–µ—Ç–≤–µ—Ä–≥",
    5: "–ü—è—Ç–Ω–∏—Ü–∞",
    6: "–°—É–±–±–æ—Ç–∞",
    7: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

days_number = {
    "–í–Ω–µ —Å–µ—Ç–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è": 0,
    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 1,
    "–í—Ç–æ—Ä–Ω–∏–∫": 2,
    "–°—Ä–µ–¥–∞": 3,
    "–ß–µ—Ç–≤–µ—Ä–≥": 4,
    "–ü—è—Ç–Ω–∏—Ü–∞": 5,
    "–°—É–±–±–æ—Ç–∞": 6,
    "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 7
}

week_name = {
    "–≤–µ—Ä—Ö–Ω—è—è": ("–Ω–µ—á—ë—Ç–Ω–∞—è", "‚¨ÜÔ∏è", "üî¥"),
    "–Ω–∏–∂–Ω—è—è": ("—á—ë—Ç–Ω–∞—è", "‚¨áÔ∏è", "üîµ")
}

types_name = {
    1: "–õ–µ–∫—Ü–∏—è",
    2: "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ",
    3: "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–µ",
    4: "–ö–æ–ª–ª–æ–∫–≤–∏—É–º",
    5: "–≠–ª–µ–∫—Ç–∏–≤–Ω–æ–µ"
}


class Lesson:
    def __init__(self, groups: list, teachers: list,
                 building: str, class_rooms: list,
                 week_day: int, week_types: list,
                 lesson_type: str, name: str,
                 start_time: str, end_time: str,
                 order: str):
        self.groups: list = groups
        self.teachers: list = teachers
        self.building: str = building
        self.class_rooms: list = class_rooms
        self.week_day: int = week_day
        self.week_types: list = week_types
        self.lesson_type: str = lesson_type
        self.name: str = name
        self.start_time: str = start_time
        self.end_time: str = end_time
        self.order: str = order


def connect_all_elements(list_elements) -> str:
    result: str = ""

    for element in list_elements:
        result += '\n\t' + element

    return result


def format_timetable_text(week_type: str, week_day: int, lessons: list) -> str:
    day_lessons = find_all_day_lessons(week_type, week_day, lessons)

    result: str = f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞:</b>\n" \
                  f"<i>{days_name[week_day]}, " \
                  f"{week_name[week_type][2]}" \
                  f"{week_name[week_type][1]} " \
                  f"{week_name[week_type][0]} –Ω–µ–¥–µ–ª—è</i>\n"

    if not day_lessons:
        result += f'\n–í—ã—Ö–æ–¥–Ω–æ–π'

    for lesson in day_lessons:
        result += f'\n<b>{lesson.order}.</b> {lesson.start_time} - {lesson.end_time}\n' \
                  f'<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {lesson.name}, {lesson.lesson_type}\n' \
                  f'<b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏:</b> {connect_all_elements(lesson.teachers)}\n' \
                  f'<b>–ê—É–¥–∏—Ç–æ—Ä–∏–∏:</b> {connect_all_elements(lesson.class_rooms)}\n' \
                  f'<b>–ö–æ—Ä–ø—É—Å:</b> {lesson.building}\n' \
                  f'<b>–ì—Ä—É–ø–ø—ã:</b> {connect_all_elements(lesson.groups)}\n'

    return result


def create_elements_list(lesson: dict, key: str) -> list:
    elements = []
    for element in lesson[key]:
        if element != "":
            elements.append(element)

    return elements


def find_all_lessons(key_string: str) -> tuple:
    lessons = []

    data = get_official_teacher_info_data(key_string)

    for lesson in data["Lessons"]:
        lessons.append(Lesson(create_elements_list(lesson, "Groups"), create_elements_list(lesson, "Teachers"),
                              lesson["Building"], create_elements_list(lesson, "ClassRooms"),
                              days_number[lesson["WeekDay"]], create_elements_list(lesson, "WeekTypes"),
                              lesson["Type"], lesson["Name"],
                              lesson["StartTime"], lesson["EndTime"],
                              lesson["OrderNumber"]))

    return data["ActualWeekType"], lessons


def find_all_day_lessons(week_type: str, week_day: int, lessons: list) -> list:
    day_lessons = []

    for lesson in lessons:
        if week_type in lesson.week_types and (week_day == lesson.week_day):
            day_lessons.append(lesson)

    return day_lessons
